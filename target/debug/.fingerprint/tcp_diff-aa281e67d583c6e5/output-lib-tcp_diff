{"message":"unused import: `Pkcs1v15Encrypt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/server/spawner.rs","byte_start":173,"byte_end":188,"line_start":6,"line_end":6,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/server/spawner.rs","byte_start":173,"byte_end":190,"line_start":6,"line_end":6,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Pkcs1v15Encrypt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/spawner.rs:6:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `Pkcs1v15Encrypt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/server/diffuser.rs","byte_start":183,"byte_end":198,"line_start":7,"line_end":7,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/server/diffuser.rs","byte_start":183,"byte_end":200,"line_start":7,"line_end":7,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Pkcs1v15Encrypt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/diffuser.rs:7:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `Pkcs1v15Encrypt`, `RsaPublicKey`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/user/writer.rs","byte_start":84,"byte_end":99,"line_start":4,"line_end":4,"column_start":11,"column_end":26,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":11,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/user/writer.rs","byte_start":116,"byte_end":128,"line_start":4,"line_end":4,"column_start":43,"column_end":55,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":43,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/user/writer.rs","byte_start":84,"byte_end":101,"line_start":4,"line_end":4,"column_start":11,"column_end":28,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":11,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/user/writer.rs","byte_start":114,"byte_end":128,"line_start":4,"line_end":4,"column_start":41,"column_end":55,"is_primary":true,"text":[{"text":"use rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};","highlight_start":41,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Pkcs1v15Encrypt`, `RsaPublicKey`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/user/writer.rs:4:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rsa::{Pkcs1v15Encrypt, RsaPrivateKey, RsaPublicKey};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/server/spawner.rs","byte_start":1186,"byte_end":1264,"line_start":27,"line_end":27,"column_start":38,"column_end":116,"is_primary":false,"text":[{"text":"    let diffuser = diffuser::gen_diff(streams.clone(), r_difusser, stop.clone(), priv_key.clone(), pub_key.clone()); ","highlight_start":38,"highlight_end":116}],"label":"an argument of type `Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1168,"byte_end":1186,"line_start":27,"line_end":27,"column_start":20,"column_end":38,"is_primary":true,"text":[{"text":"    let diffuser = diffuser::gen_diff(streams.clone(), r_difusser, stop.clone(), priv_key.clone(), pub_key.clone()); ","highlight_start":20,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src/server/diffuser.rs","byte_start":612,"byte_end":658,"line_start":18,"line_end":18,"column_start":17,"column_end":63,"is_primary":false,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":17,"highlight_end":63}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/diffuser.rs","byte_start":660,"byte_end":697,"line_start":18,"line_end":18,"column_start":65,"column_end":102,"is_primary":false,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":65,"highlight_end":102}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/diffuser.rs","byte_start":699,"byte_end":721,"line_start":18,"line_end":18,"column_start":104,"column_end":126,"is_primary":false,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":104,"highlight_end":126}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/diffuser.rs","byte_start":723,"byte_end":758,"line_start":18,"line_end":18,"column_start":128,"column_end":163,"is_primary":false,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":128,"highlight_end":163}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/diffuser.rs","byte_start":760,"byte_end":793,"line_start":18,"line_end":18,"column_start":165,"column_end":198,"is_primary":false,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":165,"highlight_end":198}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/diffuser.rs","byte_start":795,"byte_end":841,"line_start":18,"line_end":18,"column_start":200,"column_end":246,"is_primary":false,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":200,"highlight_end":246}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/diffuser.rs","byte_start":603,"byte_end":611,"line_start":18,"line_end":18,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"pub fn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> JoinHandle<()>{","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/server/spawner.rs","byte_start":1186,"byte_end":1264,"line_start":27,"line_end":27,"column_start":38,"column_end":116,"is_primary":true,"text":[{"text":"    let diffuser = diffuser::gen_diff(streams.clone(), r_difusser, stop.clone(), priv_key.clone(), pub_key.clone()); ","highlight_start":38,"highlight_end":116}],"label":null,"suggested_replacement":"(streams.clone(), r_difusser, stop.clone(), priv_key.clone(), pub_key.clone(), /* Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/spawner.rs:27:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let diffuser = diffuser::gen_diff(streams.clone(), r_difusser, stop.clone(), priv_key.clone(), pub_key.clone()); \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>>` is missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/diffuser.rs:18:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfn gen_diff(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, r_diffuser: Receiver<(usize, String)>, stop: Arc<Mutex<bool>>, priv_key: Arc<Mutex<RsaPrivateKey>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let diffuser = diffuser::gen_diff\u001b[0m\u001b[0m\u001b[38;5;10m(streams.clone(), r_difusser, stop.clone(), priv_key.clone(), pub_key.clone(), /* Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>> */)\u001b[0m\u001b[0m; \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this function takes 7 arguments but 6 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/server/spawner.rs","byte_start":1342,"byte_end":1424,"line_start":30,"line_end":30,"column_start":33,"column_end":115,"is_primary":false,"text":[{"text":"    usr_handler_threads = listen(streams, stop.clone(), addr, t_usr_handler, usr_handler_threads, pub_key.clone());","highlight_start":33,"highlight_end":115}],"label":"an argument of type `Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1336,"byte_end":1342,"line_start":30,"line_end":30,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    usr_handler_threads = listen(streams, stop.clone(), addr, t_usr_handler, usr_handler_threads, pub_key.clone());","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src/server/spawner.rs","byte_start":1489,"byte_end":1535,"line_start":35,"line_end":35,"column_start":11,"column_end":57,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":11,"highlight_end":57}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1537,"byte_end":1559,"line_start":35,"line_end":35,"column_start":59,"column_end":81,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":59,"highlight_end":81}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1561,"byte_end":1571,"line_start":35,"line_end":35,"column_start":83,"column_end":93,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":83,"highlight_end":93}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1573,"byte_end":1611,"line_start":35,"line_end":35,"column_start":95,"column_end":133,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":95,"highlight_end":133}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1613,"byte_end":1657,"line_start":35,"line_end":35,"column_start":135,"column_end":179,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":135,"highlight_end":179}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1659,"byte_end":1692,"line_start":35,"line_end":35,"column_start":181,"column_end":214,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":181,"highlight_end":214}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1694,"byte_end":1740,"line_start":35,"line_end":35,"column_start":216,"column_end":262,"is_primary":false,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":216,"highlight_end":262}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/server/spawner.rs","byte_start":1482,"byte_end":1488,"line_start":35,"line_end":35,"column_start":4,"column_end":10,"is_primary":true,"text":[{"text":"fn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -> Vec<JoinHandle<()>>{","highlight_start":4,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/server/spawner.rs","byte_start":1342,"byte_end":1424,"line_start":30,"line_end":30,"column_start":33,"column_end":115,"is_primary":true,"text":[{"text":"    usr_handler_threads = listen(streams, stop.clone(), addr, t_usr_handler, usr_handler_threads, pub_key.clone());","highlight_start":33,"highlight_end":115}],"label":null,"suggested_replacement":"(streams, stop.clone(), addr, t_usr_handler, usr_handler_threads, pub_key.clone(), /* Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 7 arguments but 6 arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/spawner.rs:30:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    usr_handler_threads = listen(streams, stop.clone(), addr, t_usr_handler, usr_handler_threads, pub_key.clone());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>>` is missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/spawner.rs:35:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn listen(streams: Arc<Mutex<HashMap<usize, TcpStream>>>, stop: Arc<Mutex<bool>>, addr: &str, t_usr_handler: Sender<(usize, String)>, mut usr_handler_threads: Vec<JoinHandle<()>>, pub_key: Arc<Mutex<RsaPublicKey>>, keys: Arc<Mutex<HashMap<usize, RsaPublicKey>>>) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    usr_handler_threads = listen\u001b[0m\u001b[0m\u001b[38;5;10m(streams, stop.clone(), addr, t_usr_handler, usr_handler_threads, pub_key.clone(), /* Arc<Mutex<HashMap<usize, rsa::RsaPublicKey>>> */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"no method named `read` found for struct `TcpStream` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/server/spawner.rs","byte_start":2131,"byte_end":2135,"line_start":48,"line_end":48,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"                let user_pub_key = new_stream.read(); //TODO: Recieves public key","highlight_start":47,"highlight_end":51}],"label":"method not found in `TcpStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/francoperez/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/mod.rs","byte_start":21627,"byte_end":21631,"line_start":635,"line_end":635,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn read(&mut self, buf: &mut [u8]) -> Result<usize>;","highlight_start":8,"highlight_end":12}],"label":"the method is available for `TcpStream` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"src/server/spawner.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Read;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `read` found for struct `TcpStream` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/spawner.rs:48:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let user_pub_key = new_stream.read(); //TODO: Recieves public key\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `TcpStream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/francoperez/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/mod.rs:635:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn read(&mut self, buf: &mut [u8]) -> Result<usize>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `TcpStream` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse std::io::Read;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"no method named `write` found for struct `TcpStream` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/server/spawner.rs","byte_start":2194,"byte_end":2199,"line_start":49,"line_end":49,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"                new_stream.write(pub_key.lock().unwrap()); //TODO: Sends public key","highlight_start":28,"highlight_end":33}],"label":"method not found in `TcpStream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following traits are implemented but not in scope; perhaps add a `use` for one of them:","code":null,"level":"help","spans":[{"file_name":"src/server/spawner.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rsa::pkcs1::der::Writer;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/server/spawner.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::hash::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/server/spawner.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `write` found for struct `TcpStream` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/spawner.rs:49:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                new_stream.write(pub_key.lock().unwrap()); //TODO: Sends public key\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `TcpStream`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse rsa::pkcs1::der::Writer;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse std::hash::Hasher;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse std::io::Write;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this method takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/user/writer.rs","byte_start":478,"byte_end":480,"line_start":17,"line_end":17,"column_start":17,"column_end":19,"is_primary":false,"text":[{"text":"    stream.write();","highlight_start":17,"highlight_end":19}],"label":"an argument of type `&[u8]` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/user/writer.rs","byte_start":473,"byte_end":478,"line_start":17,"line_end":17,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"    stream.write();","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/home/francoperez/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/mod.rs","byte_start":47696,"byte_end":47701,"line_start":1431,"line_end":1431,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn write(&mut self, buf: &[u8]) -> Result<usize>;","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/user/writer.rs","byte_start":478,"byte_end":480,"line_start":17,"line_end":17,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"    stream.write();","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"(/* &[u8] */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this method takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/user/writer.rs:17:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    stream.write();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `&[u8]` is missing\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/francoperez/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/mod.rs:1431:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write(&mut self, buf: &[u8]) -> Result<usize>;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    stream.write\u001b[0m\u001b[0m\u001b[38;5;10m(/* &[u8] */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 5 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 5 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
